name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests (Laravel)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: gig_marketplace_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      working-directory: backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      working-directory: backend
      run: cp .env.example .env

    - name: Generate application key
      working-directory: backend
      run: php artisan key:generate

    - name: Configure database
      working-directory: backend
      run: |
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=gig_marketplace/DB_DATABASE=gig_marketplace_test/' .env
        sed -i 's/DB_USERNAME=root/DB_USERNAME=root/' .env
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/' .env

    - name: Run database migrations
      working-directory: backend
      run: php artisan migrate --force

    - name: Run database seeders
      working-directory: backend
      run: php artisan db:seed --force

    - name: Run tests
      working-directory: backend
      run: php artisan test

  frontend-tests:
    name: Frontend Tests (Flutter)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'

    - name: Cache Flutter packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          frontend/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install Flutter dependencies
      working-directory: frontend
      run: flutter pub get

    - name: Analyze Flutter code
      working-directory: frontend
      run: flutter analyze

    - name: Run Flutter tests
      working-directory: frontend
      run: flutter test

  build-web:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'

    - name: Install dependencies
      working-directory: frontend
      run: flutter pub get

    - name: Build web
      working-directory: frontend
      run: flutter build web --release

    - name: Archive web build
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: frontend/build/web/

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'

    - name: Install dependencies
      working-directory: frontend
      run: flutter pub get

    - name: Build APK
      working-directory: frontend
      run: flutter build apk --release

    - name: Archive APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: frontend/build/app/outputs/flutter-apk/app-release.apk

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-web, build-android]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Download web build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web-build/

    - name: Deploy to Firebase Hosting (Staging)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        projectId: gig-marketplace-staging
        channelId: live
        entryPoint: frontend

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-web, build-android]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Download web build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web-build/

    - name: Deploy to Firebase Hosting (Production)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}'
        projectId: gig-marketplace-bd
        channelId: live
        entryPoint: frontend

    - name: Deploy Backend to Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /path/to/your/website
          git pull origin main
          composer install --optimize-autoloader --no-dev
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache